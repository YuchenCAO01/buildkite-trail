# agents:
#   queue: "default"
  
# steps:
#   - label: "Display Environment Variables"
#     command: "env"

#   - label: "Build Frontend"
#     command:
#       - "cd pa_frontend && npm update"
#       - "npm install --force"
#       - "npm install register-service-worker --save"
#       - "npm run build"
#     agents:
#       queue: "default"
#     plugins:
#       - docker#v3.8.0:
#           image: "node:18"

#   - label: "Preview Docker Images"
#     command: 
#       - "docker images"
#       - "docker ps"
#     agents:
#       queue: "default"


#   - label: "Build Backend"
#     command: "cd pa_backend && mvn clean install"
#     agents:
#       queue: "default"
#     plugins:
#       - docker#v3.8.0:
#           image: "maven:3.9.5" 
#           environment:
#             - "DATABASE_URL=postgresql://8.134.151.21:5432/swen90014_paplatypus_db"
#             - "DATABASE_USER=swen90014_paplatypus_owner"
#             - "DATABASE_PASSWORD=platypus"

#     - label: "Preview Docker Images"
#       command: 
#         - "docker images"
#         - "docker ps"
#       agents:
#         queue: "default"

#   - label: "Deploy Backend"
#     command:
#       # - "docker pull your-backend-image:tag"  # 从Docker镜像存储库拉取后端镜像
#       - "docker run -d -p 8080:8080 --name backend-container your-backend-image:tag"  # 运行后端容器
#     agents:
#       queue: "default"


#   - label: "Deploy Frontend"
#     command:
#       # - "docker pull your-frontend-image:tag"  # 从Docker镜像存储库拉取前端镜像
#       - "docker run -d -p 80:80 --name frontend-container your-frontend-image:tag"  # 运行前端容器
#     agents:
#       queue: "default"

# Version 2
# agents:
#   queue: "default"
  
# steps:
#   - label: "Check Node.js and Maven"
#     command:
#       - "which node || yum install -y nodejs"
#       - "which mvn || yum install -y maven"
#     agents:
#       queue: "default"

#   - label: "Build Frontend"
#     command:
#       - "cd pa_frontend"
#       - "npm update"
#       - "npm install --force"
#       - "npm install register-service-worker --save"
#       - "npm run build"
#     agents:
#       queue: "default"

#   - label: "Build Backend"
#     command:
#       - "cd pa_backend"
#       - "mvn clean install"
#     agents:
#       queue: "default"

#   - label: "Create Backend Docker Image"
#     command:
#       - "cd pa_backend"
#       - "docker build -t your-backend-image:tag ."
#     agents:
#       queue: "default"
  
#   - label: "Create Frontend Docker Image"
#     command:
#       - "cd pa_frontend"
#       - "docker build -t your-frontend-image:tag ."
#     agents:
#       queue: "default"

#   - label: "Run Backend Container"
#     command:
#       - "docker run -d -p 8080:8080 --name backend-container your-backend-image:tag"
#     agents:
#       queue: "default"

#   - label: "Run Frontend Container"
#     command:
#       - "docker run -d -p 80:80 --name frontend-container your-frontend-image:tag"
#     agents:
#       queue: "default"

#   - label: "Display Container Ports"
#     command:
#       - "docker ps -a --format 'Container {{.Names}} is using port {{.Ports}}'"
#     agents:
#       queue: "default"

# Version 3
agents:
  - queue=myMac # running locally
  - queue=aliServer # running remote ECS Server

steps:

  # Build the Front End project and Create the Docker image then push to the Docker Hub.
  - label: "Build and Push Frontend Docker Image"
    command:
      - "cd pa_frontend && npm update"
      - "npm install --force"
      - "npm install register-service-worker --save"
      - "npm run build"
      - "docker build -t pa-frontend-image:v3 -f Dockerfile.frontend ."
      - "docker push pa-frontend-image:v3"
    agents:
      queue: myMac # Local Agent

  # Build the Back End project and Create the Docker image then push to the Docker Hub.
  - label: "Build and Push Backend Docker Image"
    command:
      - "cd pa_backend && mvn clean install"
      - "docker build -t pa-backend-image:v3 -f Dockerfile.backend ."
      - "docker push pa-backend-image:v3"
    agents:
      queue: myMac # Local Agent

  - wait

  # Let the agent on the Server pull the images from the Docker Hub
  - label: "Pull and Run Backend Container on ECS Server"
    command:
      - "docker pull pa-backend-image:v3 && docker run -d -p 8080:8080 --name backend-container pa-backend-image:v3"
    agents:
      queue: aliServer # Remote Agent

  - label: "Pull and Run Frontend Container on ECS Server"
    command:
      - "docker pull pa-frontend-image:v3 && docker run -d -p 80:80 --name frontend-container pa-frontend-image:v3"
    agents:
      queue: aliServer # Remote Agent

